CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_LOGIN CHARACTER VARYING(50) NOT NULL,
    USER_NAME CHARACTER VARYING(100) NOT NULL,
    USER_EMAIL CHARACTER VARYING(200) NOT NULL,
    USER_BIRTHDAY DATE,
    CONSTRAINT USER_PK
        PRIMARY KEY (USER_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS USERS_EMAIL_UNQ
    ON USERS (USER_EMAIL);

CREATE UNIQUE INDEX IF NOT EXISTS USERS_LOGIN_UNQ
    ON USERS (USER_LOGIN);

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID INTEGER ,
    FRIENDS_ID INTEGER,
    CONSTRAINT FRIENDSHIP_PK
        PRIMARY KEY (USER_ID, FRIENDS_ID),
    CONSTRAINT USERS_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS,
    CONSTRAINT FRIENDS_FK
        FOREIGN KEY (FRIENDS_ID) REFERENCES USERS
);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING(50) NOT NULL,
    CONSTRAINT GENRE_PK
        PRIMARY KEY (GENRE_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS GENRES_NAME_UNQ
    ON GENRES (GENRE_NAME);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MPA_NAME CHARACTER VARYING(5) NOT NULL,
    CONSTRAINT MPA_PK
        PRIMARY KEY (MPA_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS MPA_NAME_UNQ
    ON MPA (MPA_NAME);


CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_NAME CHARACTER VARYING(100) NOT NULL,
    FILM_DESCRIPTION CHARACTER VARYING(500) NOT NULL,
    FILM_RELEASE_DATE DATE,
    FILM_DURATION INTEGER NOT NULL,
    FILM_RATE INTEGER,
    FILM_MPA_ID INTEGER NOT NULL,
    CONSTRAINT FILM_PK
        PRIMARY KEY (FILM_ID),
    CONSTRAINT FILM_MPA_FK
        FOREIGN KEY (FILM_MPA_ID)
            REFERENCES MPA (MPA_ID)
);

CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID),
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID)
);


CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INTEGER,
    USER_ID INTEGER,
        CONSTRAINT LIKES_PK
            PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT LIKES_FILMS_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS,
    CONSTRAINT LIKES_USERS_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS
);

